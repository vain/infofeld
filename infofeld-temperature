#!/usr/bin/env python

from infofeldlib import get_history, save_history, shadowed_text, write_ff

from argparse import ArgumentParser
from glob import glob

import cairo


def stat_snapshot():
    for i in glob('/sys/class/thermal/thermal_zone*'):
        with open(i + '/type') as fp:
            if fp.read().strip() != 'x86_pkg_temp':
                continue

        with open(i + '/temp') as fp:
            return fp.read().strip()

    return '0'


def make_surface(args):
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, args.w, args.h)
    cr = cairo.Context(surface)

    cr.rectangle(0, 0, args.w, args.h)
    cr.set_source_rgb(*[float(f) for f in args.color_background.split(',')])
    cr.fill()

    history = get_history('temperature')
    history.append(stat_snapshot())
    history = history[-(args.w * args.history_scale):]
    save_history('temperature', history)

    offset = args.base_temperature * 1000

    # Find maximum temperature (upper end of the graph) and make sure
    # that "offset" is not lower than the minimum temperature.
    max_temp = 0
    for i in history:
        max_temp = max(int(i), max_temp)
        offset = min(int(i), offset)

    l = len(history)
    if l >= 2:
        # Temperature graph.
        cr.save()
        cr.set_line_width(args.width_line)
        cr.set_source_rgb(*[float(f) for f in args.color_temperature.split(',')])
        f = args.extra_margin_factor
        for i, temp_str in enumerate(history):
            temp = (int(temp_str) - offset) / ((max_temp - offset) * f)
            cr.line_to(
                (i / (l - 1)) * args.w,
                (1 - temp) * args.h,
            )
        cr.stroke()
        cr.restore()

        # Display current temperature as text.
        shadowed_text(cr, args,
                      1, args.size_font,
                      '{}Â°C'.format(int(int(history[-1]) / 1000)))

    return surface


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('w', type=int)
    parser.add_argument('h', type=int)
    parser.add_argument('--antialias-font', action='store_true')
    parser.add_argument('--base-temperature', type=int, default=0)
    parser.add_argument('--color-background', default='0,0,0.33')
    parser.add_argument('--color-font', default='1,1,1')
    parser.add_argument('--color-font-shadow', default='0,0,0')
    parser.add_argument('--color-temperature', default='0.45,0.71,1')
    parser.add_argument('--extra-margin-factor', type=float, default=1.2)
    parser.add_argument('--history-scale', type=int, default=1)
    parser.add_argument('--size-font', type=int, default=8)
    parser.add_argument('--width-line', type=float, default=1.5)
    args = parser.parse_args()

    write_ff(make_surface(args))
