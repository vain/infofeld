#!/usr/bin/env python

from infofeldlib import shadowed_text, write_ff

from argparse import ArgumentParser

import cairo


def make_surface(args):
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, args.w, args.h)
    cr = cairo.Context(surface)

    cr.rectangle(0, 0, args.w, args.h)
    cr.set_source_rgb(*[float(f) for f in args.color_free.split(',')])
    cr.fill()

    with open('/proc/meminfo') as fp:
        lines = [l.strip() for l in fp.readlines()]

    for i in lines:
        tokens = i.split()
        if tokens[0] == 'MemTotal:':
            total = int(tokens[1])
        elif tokens[0] == 'MemAvailable:':
            avail = int(tokens[1])

    pat = cairo.LinearGradient(0, 0, args.w, 0)
    pat.add_color_stop_rgb(0, *[float(f) for f in args.color_used_begin.split(',')])
    pat.add_color_stop_rgb(1, *[float(f) for f in args.color_used_end.split(',')])
    cr.set_source(pat)

    cr.rectangle(0, 0, (total - avail) / total * args.w, args.h)
    cr.fill()

    # Print "available" space. Note that this number will probably
    # differ from other tools like free(1) or htop(1), because we ONLY
    # take MemAvailable into account. MemAvailable is an educated guess
    # by The Kernel. Those other tools try to guess by themselves how
    # much memory is "available" or "used" based on other fields in
    # /proc/meminfo.
    margin = 2
    avail_gb = avail * 1024 / 1000 / 1000 / 1000
    l = '{:.1f} G'.format(avail_gb)
    cr.set_font_size(args.size_font)
    _, _, tw, _, _, _ = cr.text_extents(l)
    shadowed_text(cr, args, args.w - tw - margin - 1, args.size_font, l)

    return surface


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('w', type=int)
    parser.add_argument('h', type=int)
    parser.add_argument('--antialias-font', action='store_true')
    parser.add_argument('--color-font', default='1,1,1')
    parser.add_argument('--color-font-shadow', default='0,0,0')
    parser.add_argument('--color-free', default='0,0,0.33')
    parser.add_argument('--color-used-begin', default='0.45,0.71,1')
    parser.add_argument('--color-used-end', default='1,0.4,0.3')
    parser.add_argument('--size-font', type=int, default=8)
    args = parser.parse_args()

    write_ff(make_surface(args))
