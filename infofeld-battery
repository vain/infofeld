#!/usr/bin/env python

from infofeldlib import shadowed_text, write_ff

from argparse import ArgumentParser
from glob import glob

import cairo


def stat_snapshot():
    for i in glob('/sys/class/power_supply/BAT?'):
        with open(i + '/capacity') as fp:
            return fp.read().strip()
    else:
        return '0'


def make_surface(args):
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, args.w, args.h)
    cr = cairo.Context(surface)

    cr.rectangle(0, 0, args.w, args.h)
    cr.set_source_rgb(*[float(f) for f in args.color_background.split(',')])
    cr.fill()

    crit_float = args.capacity_critical_percent / 100
    pat = cairo.LinearGradient(0, 0, args.w, 0)
    pat.add_color_stop_rgb(0, *[float(f) for f in args.color_capacity_critical.split(',')])
    pat.add_color_stop_rgb(crit_float, *[float(f) for f in args.color_capacity_full.split(',')])
    pat.add_color_stop_rgb(1, *[float(f) for f in args.color_capacity_full.split(',')])
    cr.set_source(pat)

    capacity = int(stat_snapshot())

    cr.rectangle(0, 0, capacity / 100 * args.w, args.h)
    cr.fill()

    shadowed_text(cr, args, 1, args.size_font, '{}%'.format(capacity))

    return surface


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('w', type=int)
    parser.add_argument('h', type=int)
    parser.add_argument('--antialias-font', action='store_true')
    parser.add_argument('--capacity-critical-percent', type=int, default=25)
    parser.add_argument('--color-background', default='0,0,0.33')
    parser.add_argument('--color-capacity-full', default='0.45,0.71,1')
    parser.add_argument('--color-capacity-critical', default='1,0.4,0.3')
    parser.add_argument('--color-font', default='1,1,1')
    parser.add_argument('--color-font-shadow', default='0,0,0')
    parser.add_argument('--size-font', type=int, default=8)
    parser.add_argument('--width-line', type=float, default=1.5)
    args = parser.parse_args()

    write_ff(make_surface(args))
